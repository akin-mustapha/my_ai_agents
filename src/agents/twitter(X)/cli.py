# cli.py
import argparse
import sys
import os

# Add the parent directory to the Python path to allow importing agent_core
# This assumes cli.py is in the project root alongside agent_core.py
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from X_ai_agent__text__img import run_twitter_agent # Import the function from agent_core.py

def main():
    parser = argparse.ArgumentParser(
        description="AI-powered Twitter Agent CLI. Generate tweets, optionally with DALL-E images, from a file input.",
        formatter_class=argparse.RawTextHelpFormatter # Keeps help text formatting
    )
    parser.add_argument(
        "--file",
        type=str,
        required=True, # Make the file argument required
        help="Path to a text file containing the main prompt/input for the AI agent."
    )
    parser.add_argument(
        "--image",
        action="store_true",
        help="Include this flag to tell the agent to generate an image to accompany the tweet."
    )
    parser.add_argument(
        "--image-description",
        type=str,
        default=None, # Default to None if not provided
        help="Optional: A specific description for the image to be generated by DALL-E.\n"
             "If --image is used but this is missing, the agent will generate a suitable image\n"
             "based on the main prompt from the file."
    )

    args = parser.parse_args()

    # Read prompt from file
    try:
        with open(args.file, 'r', encoding='utf-8') as f:
            file_content_prompt = f.read().strip()
            if not file_content_prompt:
                print(f"Error: The input file '{args.file}' is empty.", file=sys.stderr)
                sys.exit(1)
    except FileNotFoundError:
        print(f"Error: The file '{args.file}' was not found.", file=sys.stderr)
        sys.exit(1)
    except Exception as e:
        print(f"Error reading file '{args.file}': {e}", file=sys.stderr)
        sys.exit(1)

    agent_input_text = file_content_prompt
    agent_scratchpad = "" # Default empty scratchpad

    if args.image:
        if args.image_description:
            # User provided a specific image description
            agent_input_text += f"\n\nAlso, please generate an image with the exact description: '{args.image_description}'."
            agent_scratchpad = f"The user wants an image generated with the specific description: '{args.image_description}'."
        else:
            # User wants an image but didn't specify description, agent will infer
            agent_input_text += "\n\nAlso, please generate a suitable image to accompany this tweet."
            agent_scratchpad = "The user wants an image but did not provide a specific description. I will infer a suitable image description from the main tweet prompt."

    print("\n--- Running AI Agent ---")
    print(f"Agent Input (from file): \n{agent_input_text}\n")
    if agent_scratchpad:
        print(f"Agent Scratchpad Hint: {agent_scratchpad}")

    try:
        result = run_twitter_agent(agent_input_text, agent_scratchpad)
        print("\n--- Agent Output ---")
        print(result["output"])
    except Exception as e:
        print(f"\nAn error occurred during agent execution: {e}", file=sys.stderr)
        sys.exit(1) # Exit with an error code

if __name__ == "__main__":
    main()